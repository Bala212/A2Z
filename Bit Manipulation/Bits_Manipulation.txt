




Set union A | B
Set intersection A & B
Set subtraction A & ~B
Set negation ALL_BITS ^ A or ~A
Set bit A |= 1 << bit
Clear bit A &= ~(1 << bit)
Test bit (A & 1 << bit) != 0
Extract last bit A&-A or A&~(A-1) or x^(x&(x-1))
Remove last bit A&(A-1)





* given range (L,R) print xor between L to R
-> will calculate xor upto R and xor upto (L-1) and will xor them.

* given an array of n integers and 
(a1+a1)^(a1+a2)^(a1+a3)
(a2+a1)^(a2+a2)^(a2+a3)
(a1+a3)^(a2+a3)^(a3+a3)
-> take xor of all 2*a[i] elements.

* given an array of n integers and g
(a1^a2)+(a1^a3)+(a1^a4)
(       (a2^a3)+(a2^a4)
                (a3+a4)
-> loop from 0 to 31 and check how many 1s are there and how many zeros are there then count pairs for a number
int ans = 0;
for(int i=0; i<32; i++){
   int z=0,o=0;
   for(int j=0; j<n; j++){
   if(arr[j] & (1<<i)){
    o++;
    }
    else{
    z++;
    }
    } 
    int p = z*c;
    ans += (1<<i)*p;
} 
return ans;

int rangeBitwiseAnd(int m, int n) {
    int a = 0;
    while(m != n) {
        m >>= 1;
        n >>= 1;
        a++;
    }
    return m<<a; 
}

Some Useful Relations of Bitwise operators:

1. (a|b) = (a+b) - (a&b)     This is helpful when we want to related AND/OR operations with sum.

2. (a+b) = (a^b) + 2*(a&b)   This one is a very special relation which can be used to solve some seemingly very tough questions.



*given n integers.output xor of all subsets of array
-> xor will always be 0





*// a^b = c, c is given, find max of a*b
	ll c;
	cin>>c;
	ll bit_ct = (int)log2(c) + 1;
	ll a=0,b=0;
	vector<ll>set_bits;
	for(ll i=0; i<bit_ct; i++){
		if(c & (1<<i)){
			set_bits.push_back(i);
		}
		else{
			a |= (1<<i);
			b |= (1<<i);
		}
	}
	ll sz = (1<<set_bits.size());
	ll ans = 0;
	for(ll i=0; i<sz; i++){
		ll a_copy = a,b_copy=b;
		for(ll j=0; j<set_bits.size(); j++){
			if( i & (1<<j)){
				a_copy |= (1<<set_bits[j]);
			}
			else{
				b_copy |= (1<<set_bits[j]);
			}
		}
		ans = max(ans,a_copy*1LL*b_copy);
	}
	cout<<ans<<endl;


*Design set data structure 
add()
remove()
print()
all op must be O(1) TC and O(1) SC
0<=x<=60
-> we can make bitmask
add(5)-> 

int x = 0;
if(add){
x = x | (1<<add);
}
if(remove){
x = x & ~(1<<remove);
}
for(int i=0; i<=60; i++){
   if( x & (1<<i)){
      print(i);
    }
}


Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.
int n = nums.size();
        int x = 0;
        vector<int>f(32,0);
        for(int i=0; i<n; i++){
            for(int j=0; j<32; j++){
                if(nums[i]&(1<<j)){
                    f[j]++;
                }
            }
        }
        for(int i=0; i<32; i++){
            if(f[i]%3==1){
                x+=(1<<i);
            }
        }
        return x;


There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.
It was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].
Given the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.
vector<int> decode(vector<int>& encoded) {
        int n = encoded.size()+1;
        int a = 0;
        for(int i=0; i<=n; i++){
            a^=i;
            if(i<n && i%2==1){
                a^=encoded[i];
            }
        }
       
        vector<int>ans(n);
        ans[0] = a;
        for(int i=1; i<n; i++){
           ans[i] = ans[i-1]^encoded[i-1];
        }
        return ans;
    }


*Two numbers with odd occurrences
    vector<long long int> twoOddNum(long long int Arr[], long long int N){
        
        long long int xor2 = Arr[0]; /* Will hold XOR of two odd occurring elements */
        long long int set_bit_no; /* Will have only single set bit of xor2 */
        long long int i, x = 0, y = 0;  
          
        /* Get the xor of all elements in Arr[]. The xor will basically  
            be xor of two odd occurring elements */
        for(i = 1; i < N; i++)  
            xor2 = xor2 ^ Arr[i];  
          
        /* Get one set bit in the xor2. We get rightmost set bit  
            in the following line as it is easy to get */
        set_bit_no = xor2 & ~(xor2-1);  
          
        /* Now divide elements in two sets:  
            1) The elements having the corresponding bit as 1.  
            2) The elements having the corresponding bit as 0. */
        for(i = 0; i < N; i++){  
            /* XOR of first set is finally going to hold one odd  
            occurring number x */
            if(Arr[i] & set_bit_no)  
            x = x ^ Arr[i];  
          
            /* XOR of second set is finally going to hold the other  
            odd occurring number y */
            else
            y = y ^ Arr[i];  
        }
        
        vector<long long int>v;
        v.push_back(max(x,y));
        v.push_back(min(x,y));
        return v; 
    }