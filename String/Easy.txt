1. Remove outermost parantheses

string removeOuterParentheses(string s)
{
    int open = 0;
    int close = 0;
    int start = 0;
    string ans = "";
    int n = s.size();
    for (int i = 0; i < n; i++)
    {
        // Count opening and closing parantheses!
        if (s[i] == '(')
            open++;
        else
            close++;
        // When both becomes equal that means we got some set of valid parantheses
        // now let's remove outermost one's
        if (open == close)
        {
            // We have to exclude first and last parenthesis from set of valid parentheses!!
            // So we will start from "start+1" till "i-1"
            for (int j = start + 1; j < i; j++)
            {
                ans += s[j];
            }
            // Again set the start from where we have to exclude the parantheses
            start = i + 1;
            // Again start counting parantheses from next iteration
            open = 0;
            close = 0;
        }
    }
    return ans;
}
// T.C-> O(2*N) -> inner loop will only run for n times overall
// S.C-> O(N) for storing the answer

//------ Using stack---------
string removeOuterParentheses(string s)
{
    // We will consider the bracket into answer only if stack is not empty, bcoz if stack is empty
    // then they are outermost brackets
    // Check for empty before pushing and after popping.
    stack<char> st;
    string ans = "";
    int n = s.size();
    for (int i = 0; i < n; i++)
    {
        if (s[i] == '(')
        {
            // If stack is not empty, means there is opening parantheses which can be the outermost
            // so we can consider this opening bracket as answer, as it is not the outermost na(stack is non empty)
            if (!st.empty())
            {
                ans += s[i];
            }
            st.push(s[i]);
        }
        // s[i] == ')'
        else
        {
            // We pop the opening bracket for this closing one and check if stack is empty or not
            st.pop();
            // If stack is not empty, i.e this closing bracket is not outermost one and can be consider as answer
            // there still exist a closing bracket ahead which is the outermost bcoz stack is not empty
            if (!st.empty())
            {
                ans += s[i];
            }
        }
    }
    return ans;
}
// T.C-> O(N)
// S.C-> O(2*N) stack and string
--------------------------------------------------------------------------------------------------
2.Reverse Words in a String

// Using stack
string reverseWords(string s)
{
    stack<string> st;
    string temp = "";
    // Push each word in the string and the pop one by one to get the required result
    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] != ' ')
        {
            temp += s[i];
        }
        else
        {z
            if (temp != "")
                st.push(temp);
            temp = "";
        }
    }
    // Push the last word
    if (temp != "")
    {
        st.push(temp);
    }
    // Pop each word and add it to answer with space
    string ans = "";
    while (st.size() != 1)
    {
        ans += (st.top() + " ");
        st.pop();
    }
    // As its the last word to be pushed we don't have to add space!
    ans += st.top();
    return ans;
}
// T.C-> O(N)
// S.C-> O(2*N) stack and string

--------------------------------------------------------------------------------------------------
3.Largest Odd Number in String

string largestOddNumber(string s)
{
    string ans = "";
    int n = s.size();
    int ind = -1;
    // Find the index of first odd number from end
    for (int i = n - 1; i >= 0; i--)
    {
        if ((s[i] - '0') % 2 == 1)
        {
            ind = i;
            break;
        }
    }
    // Get the chars from 0 to ind as answer
    for (int i = 0; i <= ind; i++)
    {
        ans += s[i];
    }
    return ans;
}
// TC-> O(2*N)
// S.C-> O(N)
--------------------
Optimized-->
// Popping even from back
string largestOddNumber(string s)
{
    int n = s.size();
    for (int i = n - 1; i >= 0; i--)
    {
        if ((s[i] - '0') % 2 == 0)
            s.pop_back();
        else
            break;
    }
    return s;
}
// TC-> O(N)
// S.C-> O(1)
--------------------------------------------------------------------------------------------------
4.Longest Common Prefix
string longestCommonPrefix(vector<string> &strs)
{
    string ans = "";
    // Sort the string bcoz we need have to compare the smallest and the largest string
    // And common prefix of them will be our answer
    sort(strs.begin(), strs.end());
    int n = strs.size();
    string s1 = strs[0];
    string s2 = strs[n - 1];
    // loop till shortest length i.e s1
    for (int i = 0; i < s1.size(); i++)
    {
        if (s1[i] == s2[i])
            ans += s1[i];
        else
            break;
    }
    return ans;
}
// T.C->O(N *logN + N)
// S.C->O(N)
--------------------------------------------------------------------------------------------------
5.Isomorphic String

bool isIsomorphic(string s, string t)
{
    unordered_map<char, char> m1, m2;
    int n = s.size(), flag = 1;
    for (int i = 0; i < n; i++)
    {
        // Check if Mapping is correct or not if not then return false
        if (m1.find(s[i]) != m1.end() && m1[s[i]] != t[i])
            return 0;
        if (m2.find(t[i]) != m2.end() && m2[t[i]] != s[i])
            return 0;
        // Map characters of "s" to "t" and "t" to "s"
        m1[s[i]] = t[i];
        m2[t[i]] = s[i];
    }
    // If mapping was correct return true
    return 1;
}
// T.C-> O(N) or O(N*logN) depending on which map data structure we are using, where N = size of the array.
// S.C-> O(2*N)
--------------------------------------------------------------------------------------------------
6.Check whether one string is a rotation of another

// Note:
// String find is used to find the first occurrence of a sub-string in the specified
// string being called upon. It returns the index of the first occurrence of the substring
// in the string from the given starting position. The default value of starting
// position is 0.
// It is a member function of std::string class.
bool rotateString(string s, string goal)
{
    // s+s(2 times string s) should contaion goal if goal is rotated to left!!
    return (s.size() == goal.size() && (s + s).find(goal) != -1);
}
// OR
bool rotateString(string s, string goal)
{
    // s+s(2 times string s) should contaion goal if goal is rotated to left!!
    return (s.size() == goal.size() && (s + s).find(goal) != string::npos);
    // To put it simply, think of npos as no-position. As a return value,
    // it is usually used to indicate that no matches were found in the string.
}
// T.C->O(2*N)
// S.C->O(1)

class Solution {
public:
    bool rotateString(string p, string q) {
        // Create two queues to store characters of strings p and q
        queue<char> q1;
        queue<char> q2;
        
        // Check if the lengths of strings p and q are different
        if (p.length() != q.length()) {
            // If the lengths are different, p cannot be rotated to form q, so return false (0)
            return false;
        }
        
        // If the lengths of p and q are the same, proceed with the rotation check
        // Copy characters of string p into queue q1 and characters of string q into queue q2
        for (int i = 0; i < p.length(); i++) {
            q1.push(p[i]);
            q2.push(q[i]);
        }
        
        // Perform rotation checks
        for (int i = 0; i < p.length(); i++) {
            // Check if the contents of q1 and q2 are the same (i.e., strings p and q are equal)
            if (q1 == q2) {
                // If the queues are equal, it means p can be obtained by rotating q, so return true (1)
                return true;
            } else {
                // If the queues are not equal, rotate q2 by moving its front character to the back
                q2.push(q2.front());
                q2.pop();
            }
        }
        
        // If the rotation checks are done and q1 never becomes equal to q2, it means p cannot be obtained
        // by rotating q, so return false (0)
        return false;
    }
};
// T.C->O(N*N)
// S.C->O(2*N)
--------------------------------------------------------------------------------------------------
7.Check if two strings are anagram of each other (can be made same?)

bool isAnagram(string s, string t)
{
    sort(s.begin(), s.end());
    sort(t.begin(), t.end());
    return s == t;
}
// T.C->O(N*logN)
// S.C->O(1)
---------------
bool isAnagram(string s, string t)
{
    // Hash the values as a->0, b->1 s will increase and t will decrease
    // At last if any of them is not zero return false else true
    vector<int> hash(26, 0);
    if (s.size() != t.size())
        return 0;
    for (int i = 0; i < s.size(); i++)
    {
        hash[s[i] - 'a']++;
        hash[t[i] - 'a']--;
    }
    for (int i = 0; i < 26; i++)
    {
        if (hash[i] != 0)
            return 0;
    }
    return 1;
}
// T.C->O(N)
// S.C->O(26)